require "ElevatorMedia/streamer"
require 'spec_helper'
require 'rest-client'

#fakeWeather = {"coord"=>{"lon"=>-73.64, "lat"=>45.45}, "weather"=>[{"id"=>501, "main"=>"Rain", "description"=>"moderate rain", "icon"=>"10d"}], "base"=>"stations", "main"=>{"temp"=>1, "feels_like"=>-1, "temp_min"=>0, "temp_max"=>3.0, "pressure"=>1005, "humidity"=>50}, "visibility"=>24140, "wind"=>{"speed"=>10, "deg"=>150}, "rain"=>{"1h"=>1.53}, "clouds"=>{"all"=>90}, "dt"=>1587501335, "sys"=>{"type"=>1, "id"=>890, "country"=>"CA", "sunrise"=>1587462324, "sunset"=>1587512465}, "timezone"=>-14400, "id"=>6325494, "name"=>"Montreal", "cod"=>200}
 fakeWeather = {"coord"=>{"lon"=>-73.59,"lat"=>45.51},"weather"=>[{"id"=>803,"main"=>"Clouds","description"=>"broken clouds","icon"=>"04d"}],"base"=>"stations","main"=>{"temp"=>-0.13,"feels_like"=>-12.86,"temp_min"=>-2,"temp_max"=>1.67,"pressure"=>1005,"humidity"=>50},"visibility"=>24140,"wind"=>{"speed"=>13.9,"deg"=>260,"gust"=>17},"clouds"=>{"all"=>75},"dt"=>1587574145,"sys"=>{"type"=>1,"id"=>943,"country"=>"CA","sunrise"=>1587549345,"sunset"=>1587599363},"timezone"=>-14400,"id"=>6077243,"name"=>"Montreal","cod"=>200}
 #fakeTimer = {"week_number":17,"utc_offset":"-04:00","utc_datetime":"2020-04-22T20:40:36.387795+00:00","unixtime":1587588036,"timezone":"America/Montreal","raw_offset":-18000,"dst_until":"2020-11-01T06:00:00+00:00","dst_offset":3600,"dst_from":"2020-03-08T07:00:00+00:00","dst":true,"day_of_year":113,"day_of_week":3,"datetime":"2020-04-22T16:40:36.387795-04:00","client_ip":"45.58.108.94","abbreviation":"EDT"}


describe ElevatorMedia::Streamer do
    let!(:streamer){ElevatorMedia::Streamer.new}
    describe "Get getContent method" do
        it "return a string" do
            expect(OpenWeather::Current).to receive(:city_id).with(6077243, {:units=>"metric", :APPID=>ENV["weather"]}).and_return(fakeWeather)
            result = ElevatorMedia::Streamer.getContent("weather")
            expect(result).to be_a_kind_of(String)
        end
    end

    describe "Get cityWeather method" do
        it "return the query" do
            expect(OpenWeather::Current).to receive(:city_id).with(6077243, {:units=>"metric", :APPID=>ENV["weather"]}).and_return(fakeWeather)
            result = ElevatorMedia::Streamer.weatherCity()
            expect(result).to_not be_nil
        end
    end

     





end